#!/usr/bin/env python
"""
A simplified demo of the AI Coder Agent workflow without DSPy dependencies.
This demonstrates how the agent would work conceptually.
"""

import os
import subprocess
import sys
import re
from pydantic import BaseModel, Field
from typing import List


# --- Pydantic Models ---

class Plan(BaseModel):
    """A structured plan to achieve a coding goal."""
    description: str = Field(description="A high-level summary of the plan.")
    tasks: List[str] = Field(description="A list of concrete, sequential coding tasks to achieve the goal.")


class Analysis(BaseModel):
    """An analysis of a code execution attempt."""
    description: str = Field(description="A detailed analysis of the execution result.")
    completed: bool = Field(description="Set to true if the task was successfully completed.")


# --- Core Functions ---

def execute_code(code: str, filename: str = "temp_agent_code.py") -> str:
    """Executes a string of Python code safely and captures its output."""
    if os.path.exists(filename):
        os.remove(filename)

    try:
        with open(filename, "w") as f:
            f.write(code)

        result = subprocess.run(
            [sys.executable, filename],
            capture_output=True,
            text=True,
            timeout=60
        )
        
        log = f"--- Execution Log ---\n"
        if result.stdout:
            log += f"STDOUT:\n{result.stdout}\n"
        if result.stderr:
            log += f"STDERR:\n{result.stderr}\n"
        if not result.stdout and not result.stderr:
            log += "No output captured. The script ran silently.\n"
        log += "--------------------"
        return log

    except subprocess.TimeoutExpired:
        return "Execution timed out after 60 seconds."
    except Exception as e:
        return f"An error occurred during execution setup: {e}"
    finally:
        if os.path.exists(filename):
            os.remove(filename)


def extract_code(llm_output: str) -> str:
    """Extracts Python code from markdown-formatted string."""
    match = re.search(r"```python\n(.*?)```", llm_output, re.DOTALL)
    if match:
        return match.group(1).strip()
    return llm_output.strip()


# --- Mock LLM Responses (simulating what a real LLM would generate) ---

def mock_generate_plan(goal: str) -> Plan:
    """Mock plan generation (simulates LLM response)."""
    if "hello world" in goal.lower():
        return Plan(
            description="Create a simple Python script that prints 'Hello World'",
            tasks=[
                "Create a Python script with a print statement",
                "Test the script execution"
            ]
        )
    elif "file" in goal.lower() and "create" in goal.lower():
        return Plan(
            description="Create a file with specified content",
            tasks=[
                "Write Python code to create a file",
                "Add content to the file",
                "Verify the file was created successfully"
            ]
        )
    else:
        return Plan(
            description="Generic coding task",
            tasks=["Implement the requested functionality", "Test the implementation"]
        )


def mock_generate_code(task_description: str, context: str) -> str:
    """Mock code generation (simulates LLM response)."""
    if "print" in task_description.lower() and "hello" in task_description.lower():
        return """```python
print("Hello, World!")
print("This is generated by the AI Coder Agent!")
```"""
    elif "create" in task_description.lower() and "file" in task_description.lower():
        return """```python
# Create a file with content
with open('agent_output.txt', 'w') as f:
    f.write('Hello from AI Coder Agent!\\n')
    f.write('This file was created automatically.\\n')
print('File created successfully!')
```"""
    elif "test" in task_description.lower():
        return """```python
# Test if file exists
import os
if os.path.exists('agent_output.txt'):
    with open('agent_output.txt', 'r') as f:
        content = f.read()
    print(f"File contents: {repr(content)}")
    print("Test passed: File exists and has content!")
else:
    print("Test failed: File does not exist")
```"""
    else:
        return f"""```python
# Mock implementation for: {task_description[:50]}...
print("Executing task: {task_description}")
print("Task completed successfully!")
```"""


def mock_analyze_result(task_description: str, code: str, execution_log: str) -> Analysis:
    """Mock result analysis (simulates LLM response)."""
    if "STDERR:" in execution_log and "Error" in execution_log:
        return Analysis(
            description="The code execution failed with an error. The task was not completed successfully.",
            completed=False
        )
    elif "STDOUT:" in execution_log or "No output captured" in execution_log:
        return Analysis(
            description="The code executed successfully and produced the expected output. Task completed.",
            completed=True
        )
    else:
        return Analysis(
            description="The execution result is unclear. Assuming task completed.",
            completed=True
        )


# --- Simple AI Coder Agent ---

class SimpleAICoderAgent:
    """A simplified version of the AI Coder Agent for demonstration."""
    
    def run(self, goal: str):
        """Run the agent to achieve a coding goal."""
        print(f"üöÄ \033[1;35mGoal:\033[0m {goal}\n")

        # 1. Generate Plan
        print("ü§î \033[1;33mGenerating plan...\033[0m")
        plan = mock_generate_plan(goal)
        print(f"üìù \033[1;36mPlan:\033[0m {plan.description}")
        for i, task in enumerate(plan.tasks):
            print(f"  {i+1}. {task}")
        print("-" * 50)

        context = f"The overall goal is: {goal}\n"
        context += f"The plan is: {plan.description}\n"

        # 2. Iterate through tasks
        for i, task in enumerate(plan.tasks):
            print(f"\n‚ñ∂Ô∏è  \033[1;34mExecuting Task {i+1}/{len(plan.tasks)}:\033[0m {task}")
            
            # 2a. Generate Code
            print("   - ü§ñ Generating code...")
            code_result = mock_generate_code(task, context)
            generated_code = extract_code(code_result)
            
            print("\033[32m--- Generated Code ---\033[0m")
            print(generated_code)
            print("\033[32m----------------------\033[0m")

            # 2b. Execute Code
            print("   - ‚ö° Executing code...")
            execution_log = execute_code(generated_code)
            print(execution_log)

            # 2c. Analyze Result
            print("   - üßê Analyzing result...")
            analysis = mock_analyze_result(task, generated_code, execution_log)
            
            print(f"   - \033[1;37mAnalysis:\033[0m {analysis.description}")

            # 2d. Check for completion and update context
            if analysis.completed:
                print("   - ‚úÖ \033[1;32mTask Completed Successfully!\033[0m")
                context += f"\n--- Completed Task: {task} ---\n"
                context += f"Code:\n{generated_code}\n"
                context += f"Result: {analysis.description}\n"
            else:
                print("   - ‚ùå \033[1;31mTask Failed. Stopping agent.\033[0m")
                print("-" * 50)
                print("Agent stopped due to task failure.")
                return
            
            print("-" * 50)
        
        print("\nüéâ \033[1;32mAll tasks completed. Agent finished successfully!\033[0m")


# --- Demo Functions ---

def demo_hello_world():
    """Demo: Create a hello world program."""
    print("=== DEMO 1: Hello World ===")
    agent = SimpleAICoderAgent()
    agent.run("Create a simple hello world program")
    print("\n" + "="*60 + "\n")


def demo_file_creation():
    """Demo: Create a file with content."""
    print("=== DEMO 2: File Creation ===")
    agent = SimpleAICoderAgent()
    agent.run("Create a file named 'output.txt' with some content")
    print("\n" + "="*60 + "\n")


def main():
    """Run the demos."""
    print("ü§ñ AI Coder Agent - Simplified Demo\n")
    print("This demo shows how the AI Coder Agent would work conceptually.")
    print("In the real version, DSPy would handle the LLM interactions.\n")
    
    demo_hello_world()
    demo_file_creation()
    
    print("‚ú® Demo completed! The core agent logic works correctly.")


if __name__ == "__main__":
    main()
